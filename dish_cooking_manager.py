"""
1. Используйте словарь dishes, содержащий названия блюд и время их приготовления.
Время приготовления каждого блюда должно быть уменьшено в десять раз,
чтобы симулировать вашу уникальную способность к быстрому приготовлению (duration/10).

2. Функция cook_dish() имитирует процесс приготовления блюда. Функция должна выводить
сообщения о начале и завершении приготовления каждого блюда, а также время, затраченное
на его приготовление. Используйте asyncio.sleep() для имитации процесса приготовления.

3. Управление задачами: В main() создайте и одновременно запустите задачи на приготовление
всех блюд из вашего меню, используя asyncio.create_task(). Задачам при создании присвойте
имена соответствующих блюд с помощью аргумента name=name_dish, в дальнейнем это поможет
извлечь имя задачи с помощью task.get_name().

4. Отслеживание и отмена задач: Используйте asyncio.wait() с таймаутом в 10 секунд для ожидания
завершения задач. Задачи, которые не успеют завершиться до истечения таймаута, должны быть отменены.
Выведите сообщения для каждой отмененной задачи.

5. Статистика: По завершении всех операций выведите статистику: сколько блюд было успешно приготовлено
и сколько не успели приготовиться до истечения времени.

Ожидаемый результат:
Пользователь должен увидеть логи начала и завершения приготовления каждого блюда.
Для блюд, приготовленных быстрее 10 секунд, должно быть выведено соответствующее сообщение о завершении.
Для блюд, не успевших приготовиться, должно быть выведено сообщение об отмене.
В конце должна быть представлена статистика по количеству приготовленных и не успевших приготовиться блюд.
"""

import asyncio

dishes = {'Куриный суп': 118, 'Бефстроганов': 13, 'Рататуй': 49, 'Лазанья': 108, 'Паэлья': 51, 'Утка по-пекински': 41,
          'Суши': 116, 'Цезарь с курицей': 106, 'Маргарита пицца': 23, 'Шпинатный пирог': 29, 'Карри с курицей': 88,
          'Тирамису': 10, 'Греческий салат': 18, 'Фалафель': 102, 'Буррито': 90, 'Карбонара': 111,
          'Ризотто с грибами': 79, 'Фокачча': 38, 'Шашлык': 121, 'Газпачо': 95, 'Блинчики': 118,
          'Сэндвич с авокадо': 67,
          'Кимчи': 80, 'Табуле': 68, 'Паста алла норма': 32, 'Жареный рис': 47, 'Том Ям': 19, 'Веганский бургер': 43,
          'Киш с луком': 61, 'Салат Нисуаз': 97}


async def cook_dish(name, duration):
    print(f"Приготовление {name} начато.")
    await asyncio.sleep(duration)
    print(f"Приготовление {name} завершено. за {duration}")


async def main():
    tasks = []
    for name, duration in dishes.items():
        task = asyncio.create_task(cook_dish(name, duration / 10), name=name)
        tasks.append(task)

    done, pending = await asyncio.wait(tasks, timeout=10)

    for task in done:
        print(f"Приготовление {name} завершено. за {duration / 10}")

    for task in pending:
        print(f"{task.get_name()} не успел(а,о) приготовиться и будет отменено.")

    print(f"\nПриготовлено блюд: {len(done)}. Не успели приготовиться: {len(pending)}.")


asyncio.run(main())
