"""
1. Условия соревнования:
Дистанция забега: 100 метров.
Участники: 20 бегунов с заранее определенной скоростью.
Цель: Симулируйте забег, где каждый бегун стартует одновременно со всеми, а финиширует
в зависимости от своей скорости.
Формула расчёта и округления значения результата до 2-х символов после запятой: round(distance / speed, 2).
Ограничение по времени: Зачетное время на преодоление дистанции бегунами не
должно превысить 10 секунд. Ваша задача - отследить, кто из участников
укладывается в это время. Бегуны, не успевшие завершить забег в течение 10 секунд,
в итоговый вывод включаться не должны.

2. Создайте 20 асинхронных задач, по одной для каждого бегуна, где каждая задача будет
симулировать время, необходимое бегуну для завершения забега. Используйте функцию asyncio.create_task()
для инициализации каждой задачи, asyncio.wait_for() для установки максимального времени выполнения
всех задач и asyncio.gather() для одновременного старта бегунов.

3. Напишите асинхронную функцию run_lap(name, speed), которая будет вычислять время,
затрачиваемое бегуном на преодоление 100 метров, и выводить результаты забега.

4. Примените asyncio.wait_for() с максимальным временем ожидания, чтобы узнать,
кто из бегунов успел завершить дистанцию, а для кого время истекло.

5. Обработайте исключение asyncio.TimeoutError для случаев, когда не все бегуны
успевают завершить забег в отведенное время max_time.
"""

import asyncio

runners = {
    "Молния Марк": 12.8,
    "Ветреный Виктор": 13.5,
    "Газель Галина": 15.3,
    "Скоростной Степан": 11.2,
    "Быстрая Белла": 10.8,
    "Флеш Филипп": 22.2
}


async def run_lap(name, speed):
    time_needed = 100 / speed
    rounded_time_needed = round(time_needed, 2)
    await asyncio.sleep(time_needed)
    print(f"{name} завершил круг за {rounded_time_needed} секунд")

async def main(max_time=10):
    tasks = [run_lap(name, speed) for name, speed in runners.items()]
    try:
        await asyncio.wait_for(asyncio.gather(*tasks, return_exceptions=True), max_time)
    except asyncio.exceptions.TimeoutError as e:
        pass


asyncio.run(main())
