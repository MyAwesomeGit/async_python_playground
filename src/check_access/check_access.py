"""
У вас есть анкеты 20 человек, содержащие всю необходимую информацию для
оценки их готовности участия в операции. Основной критерий — наличие действующего
срока доступа, указанного в поле "Срок доступа" анкеты. Если срок доступа не указан (None),
это означает, что доступ к операциям для данного участника закрыт, и вследствие этого,
операция для всей группы должна быть отменена.

Кроме того, в анкетах присутствует поле "Уровень секретности", которое определяет время,
необходимое для сканирования профиля участника и преодоления бюрократических препятствий.
Время сканирования равно значению "Уровень секретности" в секундах.

Задача:
Напишите код, который асинхронно проверяет для каждого участника наличие "Срок доступа".
И в случае успеха, соответствующая задача выводит сообщение.
Участник Sarah Lewis имеет действующий доступ. Продолжительность доступа: 5857 часов

Если для какого-либо участника "Срок доступа" указан None т.е. отсутствует, необходимо
поднять исключение с помощью task.exception() и отменить выполнение всех оставшихся проверок,
так как вся секретная операция становится невозможной. Важно корректно обрабатывать исключения,
чтобы при обнаружении первого участника без допуска, программа не продолжала бессмысленно
проверять остальных.

В случае обнаружения участника без допуска т.е.  "Срок доступа": None, все оставшиеся задачи
должны быть немедленно отменены с соответствующим уведомлением.
Доступ участника Whitney Ross отменен из-за критической ошибки.
"""

import asyncio
from src.check_access.participants_data import participants_data


async def check_access(participant):
    """Асинхронная функция для проверки доступа участника."""
    await asyncio.sleep(participant["Уровень секретности"])

    if participant["Срок доступа"] is None:
        raise ValueError(
            f'Ошибка доступа: У участника {participant["Имя"]} {participant["Фамилия"]} срок доступа истек или не указан.')

    print(
        f'Участник {participant["Имя"]} {participant["Фамилия"]} имеет действующий доступ. Продолжительность доступа: {participant["Срок доступа"]}')


async def main():
    tasks = []
    for participant in participants_data:
        task = asyncio.create_task(check_access(participant), name=f'{participant["Имя"]} {participant["Фамилия"]}')
        tasks.append(task)

    done, pending = await asyncio.wait(tasks, return_when=asyncio.FIRST_EXCEPTION)

    for task in done:
        try:
            task.result()
        except Exception as e:
            print(e)
            for pending_task in pending:
                pending_task.cancel()
                print(f'Доступ участника {pending_task.get_name()} отменен из-за критической ошибки.')


asyncio.run(main())
