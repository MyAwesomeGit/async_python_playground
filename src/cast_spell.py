"""
Ваша задача - написать асинхронный код, который позволит всем ученикам
одновременно попытаться скастовать все заклинания из списка.
Используйте asyncio.wait_for() для ограничения времени каста и asyncio.shield()
для гарантии успешного завершения заклинания в качестве помощи учителя.
Убедитесь, что ваш код корректно обрабатывает исключения и выводит соответствующие
сообщения о результате каждой попытки каста.

Заклинания: В вашем арсенале находится список заклинаний,
каждое из которых требует разное время для успешного каста.
Время каста указано в секундах и варьируется от заклинания к заклинанию.

Ученики: Пять отважных учеников по имени Алара, Бренн, Сирил, Дариа и Элвин
выходят на арену одновременно, чтобы продемонстрировать своё мастерство.

Максимальное время каста: Каждый ученик должен выполнить заклинание в пределах 5 секунд.
Мудрый учитель знает возможности своих учеников и тайком накладывает защитный щит,
который позволит ученику успешно завершить каст, несмотря на превышение времени.

Ваш код должен выводить результат каждой попытки каста заклинания.

Если ученик не уложился в отведенное время, заклинание все равно должно быть выполнено,
но программа должна сообщить о том, что заклинание удалось завершить благодаря учителю.

"""


import asyncio

# Список заклинаний с временем каста
spells = {
    "Огненный шар": 3,
    "Ледяная стрела": 2,
    "Щит молний": 4,
    "Телепортация": 7,
    "Вихрь ветра": 5
}

# Ученики мага
students = ["Алара", "Бренн", "Сирил", "Дариа", "Элвин"]

# Максимальное время для каста заклинания
max_cast_time = 5


async def cast_spell(student, spell):
    try:
        await asyncio.wait_for(asyncio.shield(asyncio.sleep(spells[spell])), timeout=max_cast_time)
        print(f"{student} успешно кастует {spell} за {spells[spell]} сек.")
    except asyncio.TimeoutError:
        await asyncio.sleep(spells[spell])
        print(
            f"Ученик {student} не справился с заклинанием {spell}, и учитель применил щит."
            f"{student} успешно завершает заклинание с помощью shield.")


async def main():
    tasks = []
    for student in students:
        for spell in spells:
            task = asyncio.create_task(cast_spell(student, spell))
            tasks.append(task)

    await asyncio.gather(*tasks)


if __name__ == "__main__":
    asyncio.run(main())
